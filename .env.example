# ================================
# Django Configuration
# ================================
# Copy this file to .env and fill in your own values
# NEVER commit the .env file to git!

# Django Secret Key
# Generate a new secret key for production using:
# python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=your-secret-key-here-change-this-in-production

# Debug Mode (True for development, False for production)
# IMPORTANT: Set to False in production!
DEBUG=True

# Allowed Hosts (comma-separated list, no spaces)
# Development: localhost,127.0.0.1
# Production: yourdomain.com,www.yourdomain.com,your-ip-address
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1

# Base URL of the application (used for generating absolute URLs)
# Development: http://localhost:8000/
# Production: https://yourdomain.com/
BASE_URL=http://localhost:8000/

# Frontend Base URL (used for redirect after email verification)
# Development: http://localhost:5173/ (Vite default port)
# Production: https://yourdomain.com/
BASE_URL_FRONTEND=http://localhost:5173/

# ================================
# JWT Configuration
# ================================
# Algorithm used for JWT token signing (HS256, RS256, etc.)
JWT_ALGORITHM=HS256

# ================================
# CORS Configuration
# ================================
# Cross-Origin Resource Sharing (CORS) settings
# Comma-separated list of allowed origins (no spaces)
# Development: http://localhost:5173 (Vite default port)
# Production: https://yourdomain.com,https://www.yourdomain.com
CORS_ORIGIN_WHITELIST=http://localhost:5173,http://127.0.0.1:5173

# CORS regex patterns for dynamic origins (advanced)
# Use regex patterns to match multiple subdomains or patterns
# Example: http://.*\.example\.com,https://.*\.myapp\.com
CORS_ORIGIN_REGEX_WHITELIST=http://localhost:.*,http://127\.0\.0\.1:.*

# ================================
# PostgreSQL Database Configuration
# ================================
# Format: postgres://USER:PASSWORD@HOST:PORT/DATABASE_NAME
# Make sure this matches your Docker Compose PostgreSQL configuration
# Default port is 5433 (mapped from container's 5432)
DATABASE_URL=postgres://postgres:changeme@localhost:5433/recetario_db

# ================================
# Docker Compose PostgreSQL Configuration
# ================================
# These variables are used by docker-compose.yml to configure the database container
# Important: Keep these values in sync with DATABASE_URL above
# Note: PostgreSQL 18 is used in docker-compose.yml

# Database name
POSTGRES_DB=recetario_db

# Database user
POSTGRES_USER=postgres

# Database password (CHANGE THIS IN PRODUCTION!)
POSTGRES_PASSWORD=changeme

# Database port (host machine port, container uses 5432 internally)
POSTGRES_PORT=5433

# ================================
# Email Configuration (Mailtrap API)
# ================================
# Mailtrap API Configuration for sending emails
# The project uses Mailtrap API for reliable email delivery

# Mailtrap API Token (REQUIRED)
# Get your token from: https://mailtrap.io/api-tokens
# Development: Use your Mailtrap Sandbox API token
# Production: Use your Mailtrap Production API token
MAILTRAP_API_TOKEN=your-mailtrap-api-token

# Domain for email sender address (OPTIONAL)
# The email will be sent from: noreply@DOMAIN
# Development: example.com or localhost
# Production: yourdomain.com
DOMAIN=example.com

# ================================
# Cloudinary Configuration
# ================================
# Cloudinary is used for cloud-based image storage
# Get your credentials from: https://cloudinary.com/console

# Cloudinary URL (REQUIRED)
# Format: cloudinary://api_key:api_secret@cloud_name
# Get this URL from your Cloudinary Dashboard > Settings > API Keys
# Example: cloudinary://123456789012345:AbCdEfGhIjKlMnOpQrStUvWx@your-cloud-name
CLOUDINARY_URL=cloudinary://your-api-key:your-api-secret@your-cloud-name

# ================================
# Legacy SMTP Configuration (DEPRECATED)
# ================================
# NOTE: The project now uses Mailtrap API instead of SMTP
# These variables are kept for reference but are NO LONGER USED
# You can safely remove them or leave them empty
#
# SMTP_SERVER=
# SMTP_PORT=
# SMTP_USERNAME=
# SMTP_PASSWORD=

# ================================
# Frontend Configuration (Optional)
# ================================
# The frontend (Vue.js + Vite) has its own .env configuration
# Create a .env file in the /frontend directory if needed
#
# Example frontend .env variables:
# VITE_API_URL=http://localhost:8000/api/v1/
# VITE_APP_TITLE=RecetarioWeb
#
# Note: Vite requires variables to be prefixed with VITE_
# The frontend will work without a .env file using default values

# ================================
# Production Deployment Notes
# ================================
# Current production setup:
# - Frontend: Vercel (https://vercel.com)
# - Backend: Render (https://render.com)
# - Database: Neon PostgreSQL (https://neon.tech)
# - Emails: Mailtrap API (https://mailtrap.io)
# - Images: Cloudinary (https://cloudinary.com)
#
# For production deployment:
# 1. Set DEBUG=False
# 2. Generate a strong SECRET_KEY
# 3. Update DJANGO_ALLOWED_HOSTS with your Render domain
# 4. Update CORS_ORIGIN_WHITELIST with your Vercel domain
# 5. Set DATABASE_URL from Neon connection string
# 6. Configure MAILTRAP_API_TOKEN for email delivery
# 7. Set CLOUDINARY_URL from Cloudinary dashboard
# 8. Set BASE_URL and BASE_URL_FRONTEND with production URLs
